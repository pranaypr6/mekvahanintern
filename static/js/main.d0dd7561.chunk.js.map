{"version":3,"sources":["assets/contact.png","assets/logo.svg","context/UserContext.js","components/AddressCard.js","components/ManageAdresses.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","UserContext","createContext","Meta","Card","AddressCard","address","removeAddress","editAddress","style","width","height","margin","actions","DeleteOutlined","key","onClick","EditOutlined","avatar","src","require","title","addressType","description","addressLine1","addressLine2","city","zipcode","Option","Select","Sider","Layout","ManageAdresses","context","useContext","useState","visible","setVisible","editvisible","setEditVisible","currentItem","setCurrentItem","state","country","setAddress","addressesSaved","setAddressesSaved","useEffect","localStorage","getItem","JSON","parse","getAddresses","handleCancel","e","handleOptionChange","value","item","array","map","addr","i","uid","splice","setItem","stringify","className","user","to","noThrow","isUser","theme","mode","defaultSelectedKeys","Item","icon","UserOutlined","ContactsOutlined","UploadOutlined","type","onOk","addresses","v4","addressArray","push","onCancel","labelInValue","defaultValue","padding","marginBottom","onChange","placeholder","required","target","editAddressArray","addrs","index","layout","labelCol","span","wrapperCol","tailLayout","offset","Login","mobileNumber","setMobileNumber","password","setPassword","error","setError","loading","setLoading","fetchApi","a","Axios","post","mobile","then","res","data","status","console","log","setUser","catch","err","onLogin","color","alt","tip","message","name","initialValues","remember","label","rules","Password","valuePropName","htmlType","App","Provider","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d0dd7561.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/contact.55f9ddef.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.10408929.svg\";","import { createContext } from \"react\";\r\n\r\nconst UserContext = createContext();\r\n\r\nexport default UserContext;\r\n","import React from \"react\";\r\nimport { Card, Avatar } from \"antd\";\r\nimport { EditOutlined, DeleteOutlined } from \"@ant-design/icons\";\r\nconst { Meta } = Card;\r\n\r\nconst AddressCard = ({ address, removeAddress, editAddress }) => {\r\n  return (\r\n    <Card\r\n      style={{ width: 300, height: 200, margin: \"1em\" }}\r\n      actions={[\r\n        <DeleteOutlined key=\"delete\" onClick={() => removeAddress(address)} />,\r\n        <EditOutlined key=\"edit\" onClick={() => editAddress(address)} />,\r\n      ]}\r\n    >\r\n      <Meta\r\n        avatar={<Avatar src={require(\"../assets/contact.png\")} />}\r\n        title={address.address.addressType}\r\n        description={`${address.address.addressLine1} , ${address.address.addressLine2}, ${address.address.city} , ${address.address.zipcode}`}\r\n      />\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default AddressCard;\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport { Modal, Button, Select, Layout, Menu, Card, Avatar } from \"antd\";\r\nimport { v4 } from \"uuid\";\r\nimport AddressCard from \"./AddressCard\";\r\nimport Form from \"antd/lib/form/Form\";\r\nimport {\r\n  UserOutlined,\r\n  ContactsOutlined,\r\n  UploadOutlined,\r\n} from \"@ant-design/icons\";\r\nimport { Redirect } from \"@reach/router\";\r\nimport UserContext from \"../context/UserContext\";\r\nconst { Meta } = Card;\r\nconst { Option } = Select;\r\nconst { Sider } = Layout;\r\n\r\nconst ManageAdresses = () => {\r\n  const context = useContext(UserContext);\r\n  const [visible, setVisible] = useState(false);\r\n  const [editvisible, setEditVisible] = useState(false);\r\n  const [currentItem, setCurrentItem] = useState({});\r\n  const [address, setAddress] = useState({\r\n    addressType: \"\",\r\n    addressLine1: \"\",\r\n    addressLine2: \"\",\r\n    city: \"\",\r\n    state: \"\",\r\n    zipcode: \"\",\r\n    country: \"\",\r\n  });\r\n  const [addressesSaved, setAddressesSaved] = useState([]);\r\n\r\n  //Getting\r\n  const getAddresses = () => {\r\n    if (localStorage.getItem(\"addresses\")) {\r\n      return JSON.parse(localStorage.getItem(\"addresses\"));\r\n    }\r\n  };\r\n\r\n  const isUser = () => {\r\n    if (context.user === 0) {\r\n      return <Redirect to=\"/login\" noThrow />;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setAddressesSaved(getAddresses());\r\n  }, [address]);\r\n\r\n  //modal\r\n  const showModal = () => {\r\n    setVisible(true);\r\n  };\r\n\r\n  const handleOk = (e) => {\r\n    setVisible(false);\r\n    const addresses = {\r\n      address,\r\n      uid: v4(),\r\n    };\r\n    let addressArray = [];\r\n    if (localStorage.getItem(\"addresses\")) {\r\n      addressArray = JSON.parse(localStorage.getItem(\"addresses\"));\r\n    }\r\n    addressArray.push({ ...addresses });\r\n    localStorage.setItem(\"addresses\", JSON.stringify(addressArray));\r\n    setAddressesSaved(addressArray);\r\n    setAddress({\r\n      ...address,\r\n      addressType: \"\",\r\n      addressLine1: \"\",\r\n      addressLine2: \"\",\r\n      city: \"\",\r\n      state: \"\",\r\n      zipcode: \"\",\r\n      country: \"\",\r\n    });\r\n  };\r\n\r\n  const handleCancel = (e) => {\r\n    setVisible(false);\r\n    setEditVisible(false);\r\n  };\r\n\r\n  //form options\r\n  function handleOptionChange(value) {\r\n    setAddress({ ...address, addressType: value.value });\r\n  }\r\n\r\n  // removing address\r\n  const removeAddress = (item) => {\r\n    let array = [];\r\n    if (localStorage.getItem(\"addresses\")) {\r\n      array = JSON.parse(localStorage.getItem(\"addresses\"));\r\n    }\r\n    addressesSaved.map((addr, i) => {\r\n      if (item.uid === addr.uid) {\r\n        array.splice(i, 1);\r\n      }\r\n    });\r\n    localStorage.setItem(\"addresses\", JSON.stringify(array));\r\n    setAddressesSaved(array);\r\n  };\r\n\r\n  //Editing Address\r\n  const editAddress = (item) => {\r\n    setEditVisible(true);\r\n    setCurrentItem(item);\r\n    address.addressLine1 = item.address.addressLine1;\r\n    address.addressLine2 = item.address.addressLine2;\r\n    address.addressType = item.address.addressType;\r\n    address.state = item.address.state;\r\n    address.zipcode = item.address.zipcode;\r\n    address.city = item.address.city;\r\n    address.country = item.address.country;\r\n  };\r\n\r\n  const handleEditOk = () => {\r\n    setEditVisible(false);\r\n    let editAddressArray = [];\r\n    if (localStorage.getItem(\"addresses\")) {\r\n      editAddressArray = JSON.parse(localStorage.getItem(\"addresses\"));\r\n    }\r\n    editAddressArray.map((addrs, i) => {\r\n      if (currentItem.uid === addrs.uid) {\r\n        currentItem.address = address;\r\n        addrs.address = currentItem.address;\r\n      }\r\n      localStorage.setItem(\"addresses\", JSON.stringify(editAddressArray));\r\n      setAddressesSaved(editAddressArray);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"addressWrapper\">\r\n      {isUser()}\r\n      <div className=\"side\">\r\n        <Sider theme=\"light\" className=\"sider\">\r\n          <div className=\"logo\" />\r\n          <Menu theme=\"light\" mode=\"inline\" defaultSelectedKeys={[\"2\"]}>\r\n            <Menu.Item className=\"myProfile\">\r\n              <Meta\r\n                avatar={<Avatar src={require(\"../assets/contact.png\")} />}\r\n              />\r\n              <h3>Hi Mekvahan!</h3>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"1\" icon={<UserOutlined />}>\r\n              My Profile\r\n            </Menu.Item>\r\n            <Menu.Item key=\"2\" icon={<ContactsOutlined />}>\r\n              Manage Address\r\n            </Menu.Item>\r\n            <Menu.Item key=\"3\" icon={<UploadOutlined />}>\r\n              Change Password\r\n            </Menu.Item>\r\n          </Menu>\r\n        </Sider>\r\n      </div>\r\n      <div className=\"mainAdd\">\r\n        <div className=\"top\">\r\n          <h4>My Addresses</h4>\r\n          <Button type=\"danger\" onClick={showModal}>\r\n            Add Addresses\r\n          </Button>\r\n          <Modal\r\n            title=\"Add Address\"\r\n            visible={visible}\r\n            onOk={handleOk}\r\n            onCancel={handleCancel}\r\n          >\r\n            <Form className=\"address-inputDiv\">\r\n              <Select\r\n                labelInValue\r\n                defaultValue={{ value: \"\" }}\r\n                style={{ width: 100, padding: \"3px\", marginBottom: \"1em\" }}\r\n                onChange={handleOptionChange}\r\n              >\r\n                <Option value=\"Home\">Home</Option>\r\n                <Option value=\"Office\">Office</Option>\r\n                <Option value=\"PG\">PG</Option>\r\n              </Select>\r\n              <input\r\n                placeholder=\"Address Line 1\"\r\n                className=\"address-input\"\r\n                value={address.addressLine1}\r\n                required\r\n                onChange={(e) =>\r\n                  setAddress({ ...address, addressLine1: e.target.value })\r\n                }\r\n              />\r\n              <input\r\n                placeholder=\"Address Line 2\"\r\n                className=\"address-input\"\r\n                value={address.addressLine2}\r\n                required\r\n                onChange={(e) =>\r\n                  setAddress({ ...address, addressLine2: e.target.value })\r\n                }\r\n              />\r\n              <input\r\n                placeholder=\"City\"\r\n                className=\"address-input\"\r\n                value={address.city}\r\n                required\r\n                onChange={(e) =>\r\n                  setAddress({ ...address, city: e.target.value })\r\n                }\r\n              />\r\n              <input\r\n                placeholder=\"State\"\r\n                className=\"address-input\"\r\n                value={address.state}\r\n                required\r\n                onChange={(e) =>\r\n                  setAddress({ ...address, state: e.target.value })\r\n                }\r\n              />\r\n              <input\r\n                placeholder=\"ZipCode\"\r\n                className=\"address-input\"\r\n                value={address.zipcode}\r\n                required\r\n                onChange={(e) =>\r\n                  setAddress({ ...address, zipcode: e.target.value })\r\n                }\r\n              />\r\n              <input\r\n                placeholder=\"Country\"\r\n                className=\"address-input\"\r\n                value={address.country}\r\n                required\r\n                onChange={(e) =>\r\n                  setAddress({ ...address, country: e.target.value })\r\n                }\r\n              />\r\n            </Form>\r\n          </Modal>\r\n          <Modal\r\n            title=\"Edit Address\"\r\n            visible={editvisible}\r\n            onOk={handleEditOk}\r\n            onCancel={handleCancel}\r\n          >\r\n            <Form className=\"address-inputDiv\">\r\n              <Select\r\n                labelInValue\r\n                defaultValue={{ value: \"\" }}\r\n                style={{ width: 100, padding: \"3px\", marginBottom: \"1em\" }}\r\n                onChange={handleOptionChange}\r\n              >\r\n                <Option value=\"Home\">Home</Option>\r\n                <Option value=\"Office\">Office</Option>\r\n                <Option value=\"PG\">PG</Option>\r\n              </Select>\r\n              <input\r\n                placeholder=\"Address Line 1\"\r\n                className=\"address-input\"\r\n                value={address.addressLine1}\r\n                required\r\n                onChange={(e) =>\r\n                  setAddress({ ...address, addressLine1: e.target.value })\r\n                }\r\n              />\r\n              <input\r\n                placeholder=\"Address Line 2\"\r\n                className=\"address-input\"\r\n                value={address.addressLine2}\r\n                required\r\n                onChange={(e) =>\r\n                  setAddress({ ...address, addressLine2: e.target.value })\r\n                }\r\n              />\r\n              <input\r\n                placeholder=\"City\"\r\n                className=\"address-input\"\r\n                value={address.city}\r\n                required\r\n                onChange={(e) =>\r\n                  setAddress({ ...address, city: e.target.value })\r\n                }\r\n              />\r\n              <input\r\n                placeholder=\"State\"\r\n                className=\"address-input\"\r\n                value={address.state}\r\n                required\r\n                onChange={(e) =>\r\n                  setAddress({ ...address, state: e.target.value })\r\n                }\r\n              />\r\n              <input\r\n                placeholder=\"ZipCode\"\r\n                className=\"address-input\"\r\n                value={address.zipcode}\r\n                required\r\n                onChange={(e) =>\r\n                  setAddress({ ...address, zipcode: e.target.value })\r\n                }\r\n              />\r\n              <input\r\n                placeholder=\"Country\"\r\n                className=\"address-input\"\r\n                value={address.country}\r\n                required\r\n                onChange={(e) =>\r\n                  setAddress({ ...address, country: e.target.value })\r\n                }\r\n              />\r\n            </Form>\r\n          </Modal>\r\n        </div>\r\n        <div className=\"bottom\">\r\n          {addressesSaved ? (\r\n            addressesSaved.map((addr, index) => {\r\n              return (\r\n                <AddressCard\r\n                  address={addr}\r\n                  key={index}\r\n                  removeAddress={removeAddress}\r\n                  editAddress={editAddress}\r\n                />\r\n              );\r\n            })\r\n          ) : (\r\n            <div className=\"oops\">\r\n              <h5>Looks like you dont have any saved addresses !</h5>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ManageAdresses;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { Form, Input, Button, Checkbox, Alert, Spin } from \"antd\";\r\nimport Axios from \"axios\";\r\nimport { Redirect } from \"@reach/router\";\r\nimport UserContext from \"../context/UserContext\";\r\n\r\nconst layout = {\r\n  labelCol: { span: 8 },\r\n  wrapperCol: { span: 16 },\r\n};\r\nconst tailLayout = {\r\n  wrapperCol: { offset: 8, span: 16 },\r\n};\r\n\r\nconst Login = () => {\r\n  const context = useContext(UserContext);\r\n  const [mobileNumber, setMobileNumber] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [error, setError] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  //Redirect user\r\n  const onLogin = () => {\r\n    if (context.user !== 0) {\r\n      return <Redirect to=\"/\" noThrow />;\r\n    }\r\n  };\r\n\r\n  //Fetching data from API\r\n  const fetchApi = async () => {\r\n    setError(false);\r\n    setLoading(true);\r\n    await Axios.post(\"https://mekvahan.com/api/android_intern_task\", {\r\n      mobile: mobileNumber,\r\n      password: password,\r\n    })\r\n      .then((res) => {\r\n        const data = res.data;\r\n        if (data.status) {\r\n          console.log(data.status);\r\n          context.setUser(mobileNumber);\r\n        } else {\r\n          setError(true);\r\n        }\r\n      })\r\n      .catch((err) => setError(true));\r\n\r\n    setLoading(false);\r\n  };\r\n\r\n  const onSubmit = () => {\r\n    fetchApi();\r\n  };\r\n\r\n  return (\r\n    <div className=\"wrapper\">\r\n      {onLogin()}\r\n      <div className=\"rowOne\"></div>\r\n      <div className=\"rowTwo\">\r\n        <h1 style={{ color: \"#ff4d4f\" }}>\r\n          <img src={require(\"../assets/logo.svg\")} className=\"logo\" alt=\"\" />\r\n          MEKVAHAN\r\n        </h1>\r\n        {loading && <Spin tip=\"Fetching\"></Spin>}\r\n        {error && (\r\n          <Alert message=\"error\" type=\"error\" style={{ width: \"20em\" }} />\r\n        )}\r\n        <Form\r\n          className=\"loginForm\"\r\n          {...layout}\r\n          name=\"basic\"\r\n          initialValues={{ remember: true }}\r\n        >\r\n          <Form.Item\r\n            label=\"Mobile \"\r\n            name=\"mobilenumber\"\r\n            rules={[{ required: true, message: \"Please input your username!\" }]}\r\n          >\r\n            <Input\r\n              placeholder=\"10 digit Mobile Number\"\r\n              onChange={(e) => setMobileNumber(e.target.value)}\r\n            />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            label=\"Password\"\r\n            name=\"password\"\r\n            rules={[{ required: true, message: \"Please input your password!\" }]}\r\n          >\r\n            <Input.Password\r\n              placeholder=\"password\"\r\n              onChange={(e) => setPassword(e.target.value)}\r\n            />\r\n          </Form.Item>\r\n\r\n          <Form.Item {...tailLayout} name=\"remember\" valuePropName=\"checked\">\r\n            <Checkbox>Remember me</Checkbox>\r\n          </Form.Item>\r\n\r\n          <Form.Item {...tailLayout}>\r\n            <Button type=\"danger\" htmlType=\"submit\" onClick={onSubmit}>\r\n              Login\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import React, { useState } from \"react\";\nimport \"antd/dist/antd.css\";\nimport \"./App.css\";\nimport UserContext from \"./context/UserContext\";\nimport ManageAdresses from \"./components/ManageAdresses\";\nimport Login from \"./components/Login\";\nimport { Router } from \"@reach/router\";\nconst App = () => {\n  const [user, setUser] = useState(0);\n  return (\n    <UserContext.Provider value={{ user, setUser }}>\n      <Router>\n        <ManageAdresses path=\"/\" />\n        <Login path=\"/login\" />\n      </Router>\n    </UserContext.Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}